//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 10.3.2015 г. 23:16:59
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace PasswordGeneratorContext
{

    [DatabaseAttribute(Name = "main")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class PasswordGeneratorDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(PasswordGeneratorDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertPassword(Password instance);
        partial void UpdatePassword(Password instance);
        partial void DeletePassword(Password instance);
        partial void InsertMasterPassword(MasterPassword instance);
        partial void UpdateMasterPassword(MasterPassword instance);
        partial void DeleteMasterPassword(MasterPassword instance);

        #endregion

        public PasswordGeneratorDataContext() :
        base(GetConnectionString("PasswordGeneratorDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public PasswordGeneratorDataContext(MappingSource mappingSource) :
        base(GetConnectionString("PasswordGeneratorDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public PasswordGeneratorDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public PasswordGeneratorDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public PasswordGeneratorDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public PasswordGeneratorDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Password> Password
        {
            get
            {
                return this.GetTable<Password>();
            }
        }

        public Devart.Data.Linq.Table<MasterPassword> MasterPassword
        {
            get
            {
                return this.GetTable<MasterPassword>();
            }
        }
    }
}

namespace PasswordGeneratorContext
{

    /// <summary>
    /// There are no comments for PasswordGeneratorContext.Password in the schema.
    /// </summary>
    [Table(Name = @"""main"".Passwords")]
    public partial class Password : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private string _Password1;

        private string _Site;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnPassword1Changing(string value);
        partial void OnPassword1Changed();
        partial void OnSiteChanging(string value);
        partial void OnSiteChanged();
        #endregion

        public Password()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
        }

    
        /// <summary>
        /// There are no comments for Password1 in the schema.
        /// </summary>
        [Column(Name = @"Password", Storage = "_Password1", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Password1
        {
            get
            {
                return this._Password1;
            }
            set
            {
                if (this._Password1 != value)
                {
                    this.OnPassword1Changing(value);
                    this.SendPropertyChanging();
                    this._Password1 = value;
                    this.SendPropertyChanged("Password1");
                    this.OnPassword1Changed();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Site in the schema.
        /// </summary>
        [Column(Storage = "_Site", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Site
        {
            get
            {
                return this._Site;
            }
            set
            {
                if (this._Site != value)
                {
                    this.OnSiteChanging(value);
                    this.SendPropertyChanging();
                    this._Site = value;
                    this.SendPropertyChanged("Site");
                    this.OnSiteChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for PasswordGeneratorContext.MasterPassword in the schema.
    /// </summary>
    [Table(Name = @"""main"".MasterPasswords")]
    public partial class MasterPassword : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _ID;

        private string _MasterPassword1;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(long value);
        partial void OnIDChanged();
        partial void OnMasterPassword1Changing(string value);
        partial void OnMasterPassword1Changed();
        #endregion

        public MasterPassword()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for ID in the schema.
        /// </summary>
        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long ID
        {
            get
            {
                return this._ID;
            }
        }

    
        /// <summary>
        /// There are no comments for MasterPassword1 in the schema.
        /// </summary>
        [Column(Name = @"MasterPassword", Storage = "_MasterPassword1", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string MasterPassword1
        {
            get
            {
                return this._MasterPassword1;
            }
            set
            {
                if (this._MasterPassword1 != value)
                {
                    this.OnMasterPassword1Changing(value);
                    this.SendPropertyChanging();
                    this._MasterPassword1 = value;
                    this.SendPropertyChanged("MasterPassword1");
                    this.OnMasterPassword1Changed();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
